import QrCode from 'qrcode';
import { showToast } from '~/components/toast';
import { fetchWithAuth } from '~/api/auth';
import { html } from '~/lib/html';
import { fetchUserInfo } from '~/api/user';
import { userStore } from '~/app-state';

class Enable2Fa extends HTMLElement {
  render() {
    this.replaceChildren(html`
      <div id="totp-setup-area" class="pt-4 space-y-4">
        <p class="text-sm">
          1. Scan the QR code with your authenticator app (e.g., Google
          Authenticator, Authy):
        </p>
        <div
          id="qr-code-container"
          class="flex justify-center p-4 border rounded-md bg-background"
        >
          <canvas class="rounded-md" id="qr-code"></canvas>
        </div>
        <p class="text-sm">
          2. Enter the 6-digit code generated by your app to verify and enable
          2FA:
        </p>
        <form id="verify-2fa-form" class="flex gap-2 items-start">
          <div class="flex-grow">
            <input
              autocomplete="off"
              name="code"
              type="text"
              inputmode="numeric"
              pattern="[0-9]*"
              maxlength="6"
              class="input w-full tracking-wider"
              placeholder="XXXXXX"
            />
          </div>
          <button id="verify-2fa-btn" class="btn btn-primary">
            Verify & Enable
          </button>
        </form>
      </div>
    `);
    this.setup();
  }

  async setup() {
    const form = this.querySelector<HTMLFormElement>('#verify-2fa-form')!;
    const res = await fetchWithAuth('/api/2FA/geturi', {
      method: 'GET',
      credentials: 'include',
      cache: 'no-store',
    });
    const code = await res.text();
    const qrCodeCanvas = this.querySelector<HTMLCanvasElement>('#qr-code')!;

    QrCode.toCanvas(qrCodeCanvas, code, (err) => {
      if (err) {
        return showToast({
          type: 'error',
          message: 'Failed to generate QR code.',
        });
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const target = e.target as HTMLFormElement;
      const res = await fetchWithAuth('/api/2FA/enable', {
        method: 'POST',
        body: new FormData(target),
        cache: 'no-store',
      });

      if (res.ok) {
        showToast({
          type: 'success',
          message: '2FA enabled successfully.',
        });
        userStore.set(await fetchUserInfo());
      } else {
        showToast({
          type: 'error',
          message: await res.text(),
        });
      }
    });
  }

  connectedCallback() {
    this.render();
  }
}

if (!customElements.get('enable-2fa')) {
  customElements.define('enable-2fa', Enable2Fa);
}
