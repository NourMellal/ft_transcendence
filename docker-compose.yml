services:
  nginx:
    container_name: nginx
    build: ./nginx
    volumes:
      - static_data_volume:/api/static:ro
    ports:
      - "443:443"
    networks:
      - ft_transcendence
    init: true
    restart: always
    env_file: .env
  rabbitmq:
    env_file: .env
    container_name: rabbitmq
    build:
      context: ./rabbitmq
      args:
        RABBITMQ_HOST: ${RABBITMQ_HOST}
        RABBITMQ_PORT: ${RABBITMQ_PORT}
        RABBITMQ_NODENAME: ${RABBITMQ_NODENAME}
        RABBITMQ_API_GATEWAY_USER: ${RABBITMQ_API_GATEWAY_USER}
        RABBITMQ_API_GATEWAY_PASSWORD: ${RABBITMQ_API_GATEWAY_PASSWORD}
        RABBITMQ_USER_MANAGER_USER: ${RABBITMQ_USER_MANAGER_USER}
        RABBITMQ_USER_MANAGER_PASSWORD: ${RABBITMQ_USER_MANAGER_PASSWORD}
        RABBITMQ_FRIENDS_MANAGER_USER: ${RABBITMQ_FRIENDS_MANAGER_USER}
        RABBITMQ_FRIENDS_MANAGER_PASSWORD: ${RABBITMQ_FRIENDS_MANAGER_PASSWORD}
        RABBITMQ_NOTIFICATIONS_USER: ${RABBITMQ_NOTIFICATIONS_USER}
        RABBITMQ_NOTIFICATIONS_PASSWORD: ${RABBITMQ_NOTIFICATIONS_PASSWORD}
        RABBITMQ_LEADERBOARD_USER: ${RABBITMQ_LEADERBOARD_USER}
        RABBITMQ_LEADERBOARD_PASSWORD: ${RABBITMQ_LEADERBOARD_PASSWORD}
        RABBITMQ_MATCH_MANAGER_USER: ${RABBITMQ_MATCH_MANAGER_USER}
        RABBITMQ_MATCH_MANAGER_PASSWORD: ${RABBITMQ_MATCH_MANAGER_PASSWORD}
        RABBITMQ_CHAT_MANAGER_USER: ${RABBITMQ_CHAT_MANAGER_USER}
        RABBITMQ_CHAT_MANAGER_PASSWORD: ${RABBITMQ_CHAT_MANAGER_PASSWORD}
    volumes:
      - rabbit_mq_log_volume:/var/log/rabbitmq:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  api_gateway:
    env_file: .env
    container_name: api_gateway
    build:
      context: ./micro_services/api_gateway
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/api_gateway/app:/app:rw
      - api_gateway_db_volume:/database:rw
      - static_data_volume:/static:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  user_manager:
    env_file: .env
    container_name: user_manager
    build:
      context: ./micro_services/user_manager
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/user_manager/app:/app:rw
      - user_manager_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  friends_manager:
    env_file: .env
    container_name: friends_manager
    build:
      context: ./micro_services/friends_manager
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/friends_manager/app:/app:rw
      - friends_manager_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  notifications:
    env_file: .env
    container_name: notifications
    build:
      context: ./micro_services/notifications
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/notifications/app:/app:rw
      - notifications_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  leaderboard:
    env_file: .env
    container_name: leaderboard
    build:
      context: ./micro_services/leaderboard
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/leaderboard/app:/app:rw
      - leaderboard_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  match_manager:
    env_file: .env
    container_name: match_manager
    build:
      context: ./micro_services/match_manager
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/match_manager/app:/app:rw
      - match_manager_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  chat_manager:
    env_file: .env
    container_name: chat_manager
    build:
      context: ./micro_services/chat_manager
      args:
        NPM_MICROSERVICE_SCRIPT: ${NPM_MICROSERVICE_SCRIPT}
    volumes:
      - ./micro_services/chat_manager/app:/app:rw
      - chat_manager_db_volume:/database:rw
    networks:
      - ft_transcendence
    init: true
    restart: always
  frontend:
    container_name: frontend
    build: ./front_end
    networks:
      - ft_transcendence
    init: true
    restart: always
    # for developement
    volumes:
      - ./front_end/app:/app:rw
      - static_data_volume:/static:rw

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge

volumes:
  api_gateway_db_volume:
    name: api_gateway_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/api_gateway_db_volume"
  user_manager_db_volume:
    name: user_manager_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/user_manager_db_volume"
  friends_manager_db_volume:
    name: friends_manager_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/friends_manager_db_volume"
  notifications_db_volume:
    name: notifications_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/notifications_db_volume"
  leaderboard_db_volume:
    name: leaderboard_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/leaderboard_db_volume"
  match_manager_db_volume:
    name: match_manager_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/match_manager_db_volume"
  chat_manager_db_volume:
    name: chat_manager_db_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/chat_manager_db_volume"
  static_data_volume:
    name: static_data_volume
  rabbit_mq_log_volume:
    name: rabbit_mq_log_volume
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "${HOME}/docker_volumes/rabbit_mq_log_volume"
